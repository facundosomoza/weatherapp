{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\eduar\\\\OneDrive\\\\Escritorio\\\\React Linkedin\\\\weather\\\\react\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport SearchWeather from \"./SearchWeather\";\nimport Container from \"react-bootstrap/Container\";\nimport WeatherCity from \"./WeatherCity\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App(_ref) {\n  _s();\n\n  let {\n    showResetButton\n  } = _ref;\n  const [weather, setWeather] = useState(null);\n  const [showGeoInfo, setShowGeoInfo] = useState(true);\n  const API_KEY = \"3d3b9b32aebc72e5e766753be6d6e4d5\";\n\n  const getWeatherData = position => {\n    const latitude = position.coords.latitude;\n    const longitude = position.coords.longitude;\n    const url = `https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=${API_KEY}`;\n    fetch(url).then(response => response.json()).then(data => {\n      console.log(data);\n      setWeather(data);\n    });\n  };\n\n  const handleGetPositionError = () => {\n    console.log(\"Error al obtener la geolocalizacion\");\n  };\n\n  useEffect(initWeather, []);\n\n  function initWeather() {\n    navigator.geolocation.getCurrentPosition(getWeatherData, handleGetPositionError);\n  }\n\n  function getGeoInfo() {\n    return showGeoInfo ? /*#__PURE__*/_jsxDEV(WeatherCity, {\n      city: weather\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 26\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n  }\n\n  const reset = () => {\n    setShowGeoInfo(true);\n  };\n\n  const handleSearch = () => {\n    setShowGeoInfo(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(SearchWeather, {\n      showSearchResult: !showGeoInfo,\n      onSearch: handleSearch,\n      onReset: reset\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      children: getGeoInfo()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(App, \"aMHu+lXyu3FjV9vmJL8AuYb8sFQ=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","SearchWeather","Container","WeatherCity","App","showResetButton","weather","setWeather","showGeoInfo","setShowGeoInfo","API_KEY","getWeatherData","position","latitude","coords","longitude","url","fetch","then","response","json","data","console","log","handleGetPositionError","initWeather","navigator","geolocation","getCurrentPosition","getGeoInfo","reset","handleSearch"],"sources":["C:/Users/eduar/OneDrive/Escritorio/React Linkedin/weather/react/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport SearchWeather from \"./SearchWeather\";\nimport Container from \"react-bootstrap/Container\";\n\nimport WeatherCity from \"./WeatherCity\";\n\nfunction App({ showResetButton }) {\n  const [weather, setWeather] = useState(null);\n\n  const [showGeoInfo, setShowGeoInfo] = useState(true);\n\n  const API_KEY = \"3d3b9b32aebc72e5e766753be6d6e4d5\";\n\n  const getWeatherData = (position) => {\n    const latitude = position.coords.latitude;\n    const longitude = position.coords.longitude;\n\n    const url = `https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=${API_KEY}`;\n\n    fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        console.log(data);\n        setWeather(data);\n      });\n  };\n\n  const handleGetPositionError = () => {\n    console.log(\"Error al obtener la geolocalizacion\");\n  };\n\n  useEffect(initWeather, []);\n\n  function initWeather() {\n    navigator.geolocation.getCurrentPosition(\n      getWeatherData,\n      handleGetPositionError\n    );\n  }\n\n  function getGeoInfo() {\n    return showGeoInfo ? <WeatherCity city={weather}></WeatherCity> : <></>;\n  }\n\n  const reset = () => {\n    setShowGeoInfo(true);\n  };\n\n  const handleSearch = () => {\n    setShowGeoInfo(false);\n  };\n\n  return (\n    <>\n      <SearchWeather\n        showSearchResult={!showGeoInfo}\n        onSearch={handleSearch}\n        onReset={reset}\n      ></SearchWeather>\n\n      <Container>{getGeoInfo()}</Container>\n    </>\n  );\n}\n\nexport default App;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,SAAP,MAAsB,2BAAtB;AAEA,OAAOC,WAAP,MAAwB,eAAxB;;;;AAEA,SAASC,GAAT,OAAkC;EAAA;;EAAA,IAArB;IAAEC;EAAF,CAAqB;EAChC,MAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAAC,IAAD,CAAtC;EAEA,MAAM,CAACS,WAAD,EAAcC,cAAd,IAAgCV,QAAQ,CAAC,IAAD,CAA9C;EAEA,MAAMW,OAAO,GAAG,kCAAhB;;EAEA,MAAMC,cAAc,GAAIC,QAAD,IAAc;IACnC,MAAMC,QAAQ,GAAGD,QAAQ,CAACE,MAAT,CAAgBD,QAAjC;IACA,MAAME,SAAS,GAAGH,QAAQ,CAACE,MAAT,CAAgBC,SAAlC;IAEA,MAAMC,GAAG,GAAI,uDAAsDH,QAAS,QAAOE,SAAU,UAASL,OAAQ,EAA9G;IAEAO,KAAK,CAACD,GAAD,CAAL,CACGE,IADH,CACSC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EADtB,EAEGF,IAFH,CAESG,IAAD,IAAU;MACdC,OAAO,CAACC,GAAR,CAAYF,IAAZ;MACAd,UAAU,CAACc,IAAD,CAAV;IACD,CALH;EAMD,CAZD;;EAcA,MAAMG,sBAAsB,GAAG,MAAM;IACnCF,OAAO,CAACC,GAAR,CAAY,qCAAZ;EACD,CAFD;;EAIAvB,SAAS,CAACyB,WAAD,EAAc,EAAd,CAAT;;EAEA,SAASA,WAAT,GAAuB;IACrBC,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CACEjB,cADF,EAEEa,sBAFF;EAID;;EAED,SAASK,UAAT,GAAsB;IACpB,OAAOrB,WAAW,gBAAG,QAAC,WAAD;MAAa,IAAI,EAAEF;IAAnB;MAAA;MAAA;MAAA;IAAA,QAAH,gBAAgD,qCAAlE;EACD;;EAED,MAAMwB,KAAK,GAAG,MAAM;IAClBrB,cAAc,CAAC,IAAD,CAAd;EACD,CAFD;;EAIA,MAAMsB,YAAY,GAAG,MAAM;IACzBtB,cAAc,CAAC,KAAD,CAAd;EACD,CAFD;;EAIA,oBACE;IAAA,wBACE,QAAC,aAAD;MACE,gBAAgB,EAAE,CAACD,WADrB;MAEE,QAAQ,EAAEuB,YAFZ;MAGE,OAAO,EAAED;IAHX;MAAA;MAAA;MAAA;IAAA,QADF,eAOE,QAAC,SAAD;MAAA,UAAYD,UAAU;IAAtB;MAAA;MAAA;MAAA;IAAA,QAPF;EAAA,gBADF;AAWD;;GAzDQzB,G;;KAAAA,G;AA2DT,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}